service: product-service

frameworkVersion: '3'
	
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  stage: dev
  environment:
    PRODUCTS_TABLENAME: ${env:PRODUCTS_TABLENAME}
    STOCKS_TABLENAME: ${env:STOCKS_TABLENAME}
    MY_NAMESPACE: ${env:MY_NAMESPACE}
    EMAIL: ${env:EMAIL}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
         - productsTable
         - Arn
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
         - stocksTable
         - Arn
    - Effect: Allow
      Action: sns:*
      Resource:
        Ref: SNSTopic
      

plugins:
  - serverless-auto-swagger
  - serverless-webpack

custom:
  autoswagger:
    host: '2wk3wwe2t4.execute-api.eu-west-1.amazonaws.com/dev'
    typefiles: []
    generateSwaggerOnDeploy: false
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: ["**/*.test.js", "*.d.js", "*.py"]

functions:
  getProductsList:
    handler: handler.getProductsList    	
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById    	
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct    	
    events:
      - http:
          path: products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          batchSize: 5

resources: 
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PRODUCTS_TABLENAME}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNS2Subscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL_2}
        Protocol: email
        TopicArn:
          Ref: SNSTopic   
        FilterPolicy:
          rim: 
            - 'yes'

    stocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:STOCKS_TABLENAME}
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
